requires 2.0.0 
%alltop{
/*
 * Copyright © 2009,2010  Red Hat, Inc. All rights reserved.
 * Copyright © 2009,2010  Ding-Yi Chen <dchen at redhat.com>
 *
 * This file is part of the ibus-chewing Project.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that ill be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
#include <stdlib.h>
#include <libintl.h>
#include <ibus.h>
#include <chewing.h>
#include <string.h>
#include <stdio.h>
#define GETTEXT_PACKAGE "gtk20"
#include <glib/gi18n.h>
#include <X11/Xlib.h>
#include <X11/XKBlib.h>
#include <ctype.h>
#include "IBusChewingUtil.h"
#include "IBusChewingProperties.h"
#include "IBusChewingPreEdit.h"
#include "IBusChewingSystray.h"
#ifdef USE_GSETTINGS
#include "GSettingsBackend.h"
#endif
#ifdef USE_GCONF2
#include "GConf2Backend.h"
#endif
%}

enum CHEWING_INPUT_STYLE {
    IN_APPLICATION,
    IN_CANDIDATE,
} Chewing:Input:Style;

/**
 * EngineFlag:
 * @UNIT_TEST:              Engine is in unit test mode (i.e. not connect to Bus)
 * @INITIALIZED:            Engine is initialized.
 * @ENABLED:                Engine is enabled.
 * @FOCUS_IN:               Engine gets focus.
 * @SHOW_CANDIDATE:         Whether the candidate selection should be shown. Important for Plain Zhuyin.
 * @IS_PASSWORD:            Current input is password.
 * @PROPERTIES_REGISTERED:  Engine registered the properties.
 * 
 *
 * Engine flags show the current states of engine,
 * Thus those might change quite often.
 *
 * If SYSTEM_KEYBOARD_LAYOUT is enabled, IBus-Chewing uses whatever 
 * key_syms received. Otherwise it converts according to en-US
 * keyboard layout.
 * 
 * It does not make any difference for en-US keyboards (which are
 * the default keyboards in Taiwan). However, for French AZERTY
 * keyboard. Pressing the key below 1 returns
 * 
 * SYSTEM_KEYBOARD_LAYOUT enabled (key a): ㄇ
 * SYSTEM_KEYBOARD_LAYOUT disabled (key q): ㄆ
 *
 * libChewing does not have direct method to clean commit buffer.
 * Thus NEED_COMMIT is needed to prevent unnecessary commit.
 */
enum ENGINE_FLAG {
    INITIALIZED =               0x1,
    ENABLED =                   0x2,
    FOCUS_IN =                  0x4,
    IS_PASSWORD =               0x8,
    PROPERTIES_REGISTERED =     0x10,
} Engine:Flag;

%h{
extern MkdgPropertySpec propSpecs[];
extern const gchar *page_labels[];
extern const gchar *button_labels[];
extern GtkResponseType button_responses[];

#define ibus_chewing_engine_has_status_flag(self, f) mkdg_has_flag(self->_priv->statusFlags, f)
#define ibus_chewing_engine_set_status_flag(self, f) mkdg_set_flag(self->_priv->statusFlags, f)
#define ibus_chewing_engine_clear_status_flag(self, f) mkdg_clear_flag(self->_priv->statusFlags, f)

#define ibus_chewing_engine_has_capabilite(self, f) mkdg_has_flag(self->_priv->capabilite, f)
#define ibus_chewing_engine_set_capabilite(self, f) mkdg_set_flag(self->_priv->capabilite, f)
#define ibus_chewing_engine_clear_capabilite(self, f) mkdg_clear_flag(self->_priv->capabilite, f)

#define is_password(self) ibus_chewing_engine_has_status_flag(self, ENGINE_FLAG_IS_PASSWORD)
#define ibus_chewing_engine_is_chinese_mode(self) ibus_chewing_pre_edit_get_chi_eng_mode(self->icPreEdit)
#define is_caps_lock(self) (is_caps_led_on(self->_priv->pDisplay))

#define ibus_text_is_empty(iText) ((iText == NULL) || STRING_IS_EMPTY(iText->text))
#define is_plain_chewing ibus_chewing_pre_edit_get_property_boolean(self->icPreEdit, "plain-zhuyin")
#define cursor_current chewing_cursor_Current(self->icPreEdit->context)
%}

%privateheader{
#include "maker-dialog.h"
void ibus_chewing_engine_handle_Default(IBusChewingEngine * self,
                                        guint keyval,
                                        gboolean shiftPressed);
#define self_handle_Default ibus_chewing_engine_handle_Default

void ibus_chewing_engine_candidate_clicked(IBusEngine * engine,
                                           guint index, guint button,
                                           guint state);
void ibus_chewing_engine_property_activate(IBusEngine * engine,
                                           const gchar * prop_name,
                                           guint prop_state);
void ibus_chewing_engine_set_content_type(IBusEngine * engine,
                                          guint purpose, guint hints);

void refresh_pre_edit_text(IBusChewingEngine * self);
void update_pre_edit_text(IBusChewingEngine * self);
void refresh_aux_text(IBusChewingEngine * self);
void update_aux_text(IBusChewingEngine * self);
void update_lookup_table(IBusChewingEngine * self);
void refresh_outgoing_text(IBusChewingEngine * self);
void commit_text(IBusChewingEngine * self);
%}

%{
extern gint ibus_chewing_verbose;

#define IBUS_CHEWING_MAIN
#include "IBusConfigBackend.h"
%}

class IBus:Chewing:Engine from IBus:Engine {
    public IBusChewingPreEdit *icPreEdit = NULL
        destroywith ibus_chewing_pre_edit_free;

    public GtkWidget *sDialog = NULL;

    /**
     * preEditText: text in pre-edit buffer.
     *
     * When IN_APPLICATION: Shows pre-edit string.
     * When IN_CANDIDATE: content of pre-edit is hidden,
     * the content is visiable in auxiliary field.
     *
     * This variable is not update until next "update" event,
     * so it can be used in integration test.
     */
    public IBusText *preEditText = NULL
        destroywith g_object_unref;


    /**
     * auxText: text to be displayed in auxiliary candidate window.
     * If PLAIN CHEWING
     * When IN_APPLICATION: show chewing_aux_string
     * When IN_CANDIDATE: show the preedit 
     *
     * This variable is not update until next "update" event,
     * so it can be used in integration test.
     */
    public IBusText *auxText = NULL
        destroywith g_object_unref;


    /**
     * outgoingText: text to be committed to engine.
     *
     * This variable is not update until next "update" event,
     * so it can be used in integration test.
     */
    public IBusText *outgoingText = NULL
        destroywith g_object_unref;


    protected IBusChewingSystrayIcon *iChiEngSystrayIcon = NULL
        destroywith ibus_chewing_systray_icon_free;

    /* Log file */
    protected FILE *logFile = NULL;

    /* Indicate the string is outgoing to avoid update() set
     * NEED_COMMIT status
     * again when focus in event is trigger, 
     * because the last key is Return key
     * and libchewing is still Commit state. */

    private EngineFlag statusFlags = 0;

    private IBusCapabilite capabilite = 0;

    private ChewingInputStyle inputStyle;

    /* Do not rename this "InputMode" property, 
     * otherwise the language indicator on gnome-shell cannot work properly. */
    public IBusProperty *InputMode = {
        g_object_ref_sink(ibus_property_new
            ("InputMode",
             PROP_TYPE_NORMAL,
             SELF_GET_CLASS(self)->InputMode_label_chi,
             NULL,
             SELF_GET_CLASS(self)->InputMode_tooltip,
             TRUE,
             TRUE,
             PROP_STATE_UNCHECKED,
             NULL))
    } destroywith g_object_unref;

    public IBusProperty *AlnumSize = {
        g_object_ref_sink(ibus_property_new
            ("AlnumSize",
             PROP_TYPE_NORMAL,
             SELF_GET_CLASS(self)->AlnumSize_label_half,
             NULL,
             SELF_GET_CLASS(self)->AlnumSize_tooltip,
             TRUE,
             TRUE,
             PROP_STATE_UNCHECKED,
             NULL))
    } destroywith g_object_unref;

    public IBusProperty *setup_prop = {
        g_object_ref_sink(ibus_property_new
            ("setup_prop",
             PROP_TYPE_NORMAL,
             SELF_GET_CLASS(self)->setup_prop_label,
             NULL,
             SELF_GET_CLASS(self)->setup_prop_tooltip,
             TRUE,
             TRUE,
             PROP_STATE_UNCHECKED,
             NULL))
    } destroywith g_object_unref;

    public IBusPropList *prop_list = {
        g_object_ref_sink(ibus_prop_list_new())
    } destroywith g_object_unref;

    protected IBusKeymap *keymap_us = { ibus_keymap_get("us") };

    private Display *pDisplay = {
        XOpenDisplay(NULL)
    } destroywith XCloseDisplay;

    classwide IBusText *InputMode_label_chi = {
        g_object_ref_sink(ibus_text_new_from_static_string(_("Chinese Mode")))
    };
    classwide IBusText *InputMode_label_eng = {
        g_object_ref_sink(ibus_text_new_from_static_string(_("Alphanumeric Mode")))
    };
    classwide IBusText *InputMode_tooltip = {
        g_object_ref_sink(ibus_text_new_from_static_string
                          (_("Click to toggle Chinese/Alphanumeric Mode")))
    };
    classwide IBusText *InputMode_symbol_chi = {
        g_object_ref_sink(ibus_text_new_from_static_string("中"))
    };
    classwide IBusText *InputMode_symbol_eng = {
        g_object_ref_sink(ibus_text_new_from_static_string("英"))
    };

    classwide IBusText *AlnumSize_label_full = {
        g_object_ref_sink(ibus_text_new_from_static_string(_("Fullwidth Form")))
    };
    classwide IBusText *AlnumSize_label_half = {
        g_object_ref_sink(ibus_text_new_from_static_string(_("Halfwidth Form")))
    };
    classwide IBusText *AlnumSize_tooltip = {
        g_object_ref_sink(ibus_text_new_from_static_string
                          (_("Click to toggle Halfwidth/Fullwidth Form")))
    };
    classwide IBusText *AlnumSize_symbol_full = {
        g_object_ref_sink(ibus_text_new_from_static_string("全"))
    };
    classwide IBusText *AlnumSize_symbol_half = {
        g_object_ref_sink(ibus_text_new_from_static_string("半"))
    };

    classwide IBusText *setup_prop_label = {
        g_object_ref_sink(ibus_text_new_from_static_string(_("IBus-Chewing Preferences")))
    };
    classwide IBusText *setup_prop_tooltip = {
        g_object_ref_sink(ibus_text_new_from_static_string
                          (_("Click to configure IBus-Chewing")))
    };
    classwide IBusText *setup_prop_symbol = {
        g_object_ref_sink(ibus_text_new_from_static_string("訂"))
    };

    classwide IBusText *emptyText = {
        g_object_ref_sink(ibus_text_new_from_static_string(""))
    };

    init(self) {
        /* initialize the object here */
        IBUS_CHEWING_LOG(INFO, "init() %sinitialized",
            (self->_priv->statusFlags & ENGINE_FLAG_INITIALIZED) ? "" : "un");
        if (self->_priv->statusFlags & ENGINE_FLAG_INITIALIZED) {
            return;
        }

        IBUS_CHEWING_LOG(INFO, "init() CHEWING_DATADIR_REAL=%s",
                         QUOTE_ME(CHEWING_DATADIR_REAL));

        gchar *logFilename = getenv("IBUS_CHEWING_LOGFILE");

        if (logFilename != NULL) {
            self->logFile = fopen(logFilename, "w+");
            if (self->logFile == NULL) {
                IBUS_CHEWING_LOG(WARN, "init() Cannot write to logfile %s, ignored",
                                 logFilename);
            } else {
                mkdg_log_set_file(self->logFile);
            }
        }

        if (self->icPreEdit == NULL) {

#ifdef USE_GSETTINGS
            MkdgBackend *backend =
                mkdg_g_settings_backend_new(QUOTE_ME(PROJECT_SCHEMA_ID),
                QUOTE_ME(PROJECT_SCHEMA_DIR), NULL);
#elif defined USE_GCONF2
            MkdgBackend *backend =
                gconf2_backend_new(QUOTE_ME(PROJECT_SCHEMA_BASE), NULL);
#else
            MkdgBackend *backend = NULL;
            g_error("Flag GSETTINGS_SUPPORT or GCONF2_SUPPORT are required!");
            return;
#endif          /* USE_GSETTINGS */

            self->icPreEdit = ibus_chewing_pre_edit_new(backend);
        }

        g_assert(self->icPreEdit);

        self->icPreEdit->engine = IBUS_ENGINE(self);

        /* init properties */
        ibus_prop_list_append(self->prop_list, self->InputMode);
        ibus_prop_list_append(self->prop_list, self->AlnumSize);
        ibus_prop_list_append(self->prop_list, self->setup_prop);

        ibus_chewing_engine_set_status_flag(self, ENGINE_FLAG_INITIALIZED);

        /* In case we cannot open X display */
        if (self->_priv->pDisplay == NULL) {
            IBUS_CHEWING_LOG(WARN, "init() XOpenDisplay return NULL");
        }

        IBUS_CHEWING_LOG(DEBUG, "init() Done");
    }

    class_init(klass) {
        ibus_engine_class->property_activate =
            ibus_chewing_engine_property_activate;
        ibus_engine_class->process_key_event =
            ibus_chewing_engine_process_key_event;
        ibus_engine_class->candidate_clicked =
            ibus_chewing_engine_candidate_clicked;
#if IBUS_CHECK_VERSION(1, 5, 4)
        ibus_engine_class->set_content_type =
            ibus_chewing_engine_set_content_type;
#endif
    }

    constructor(self) {
        /* GOB need this for generating constructor */
    }

    protected void use_setting(self) {
        IBUS_CHEWING_LOG(INFO, "use_setting()");

        ibus_chewing_pre_edit_use_all_configure(self->icPreEdit);

        /* Input style */
        if (ibus_chewing_properties_read_boolean_general(self->icPreEdit->iProperties,
            "ibus/general", "embed-preedit-text", NULL)) {
            self->_priv->inputStyle = CHEWING_INPUT_STYLE_IN_APPLICATION;
        } else {
            self->_priv->inputStyle = CHEWING_INPUT_STYLE_IN_CANDIDATE;
        }
    }

    protected void restore_mode(self) {
        IBUS_CHEWING_LOG(DEBUG, "restore_mode() statusFlags=%x", self->_priv->statusFlags);
        if (self->_priv->pDisplay != NULL) {
            /* Restore Led Mode only make sense if pDisplay is available */
            if (ibus_chewing_pre_edit_has_flag(self->icPreEdit, FLAG_SYNC_FROM_IM)) {
                IBUS_CHEWING_LOG(DEBUG, "restore_mode() FLAG_SYNC_FROM_IM");
                if (ibus_chewing_engine_is_chinese_mode(self) == is_caps_lock(self)) {
                    /* ChiEng mode does not agree each other */
                    set_caps_led(!ibus_chewing_engine_is_chinese_mode(self), self->_priv->pDisplay);
                }
            } else if (ibus_chewing_pre_edit_has_flag(self->icPreEdit, FLAG_SYNC_FROM_KEYBOARD)) {
                IBUS_CHEWING_LOG(DEBUG, "restore_mode() FLAG_SYNC_FROM_KEYBOARD");
                chewing_set_ChiEngMode(self->icPreEdit->context, (is_caps_lock(self)) ? 0 : CHINESE_MODE);
            }
            self_refresh_property(self, "InputMode");
        }
    }

    protected void update(self) {
        IBUS_CHEWING_LOG(DEBUG, "update() statusFlags=%x", self->_priv->statusFlags);
        commit_text(self);
        update_pre_edit_text(self);
        update_aux_text(self);

        IBUS_CHEWING_LOG(DEBUG,
                         "update() nPhoneSeq=%d statusFlags=%x",
                         chewing_get_phoneSeqLen(self->icPreEdit->context),
                         self->_priv->statusFlags);
        update_lookup_table(self);
    }

    protected void refresh_property(self, const gchar * prop_name) {
#ifndef UNIT_TEST
        IBUS_CHEWING_LOG(DEBUG, "refresh_property(%s) status=%x",
                         prop_name, self->_priv->statusFlags);

        if (ibus_chewing_systray_chi_eng_icon_create_or_hide(self)) {
            ibus_chewing_systray_chi_eng_icon_refresh_value(self);
        }

        if (STRING_EQUALS(prop_name, "InputMode")) {

            ibus_property_set_label(self->InputMode,
                ibus_chewing_pre_edit_get_chi_eng_mode(self->icPreEdit) ?
                SELF_GET_CLASS(self)->InputMode_label_chi :
                SELF_GET_CLASS(self)->InputMode_label_eng);

#if IBUS_CHECK_VERSION(1, 5, 0)
            ibus_property_set_symbol(self->InputMode,
                ibus_chewing_pre_edit_get_chi_eng_mode(self->icPreEdit) ?
                SELF_GET_CLASS(self)->InputMode_symbol_chi :
                SELF_GET_CLASS(self)->InputMode_symbol_eng);
#endif

            ibus_engine_update_property(IBUS_ENGINE(self), self->InputMode);

        } else if (STRING_EQUALS(prop_name, "AlnumSize")) {

            ibus_property_set_label(self->AlnumSize,
                chewing_get_ShapeMode(self->icPreEdit->context) ?
                SELF_GET_CLASS(self)->AlnumSize_label_full :
                SELF_GET_CLASS(self)->AlnumSize_label_half);

#if IBUS_CHECK_VERSION(1, 5, 0)
            ibus_property_set_symbol(self->AlnumSize,
                chewing_get_ShapeMode(self->icPreEdit->context) ?
                SELF_GET_CLASS(self)->AlnumSize_symbol_full :
                SELF_GET_CLASS(self)->AlnumSize_symbol_half);
#endif

            if (self->_priv->statusFlags & ENGINE_FLAG_PROPERTIES_REGISTERED)
                ibus_engine_update_property(IBUS_ENGINE(self), self->AlnumSize);

        } else if (STRING_EQUALS(prop_name, "setup_prop")) {
#if IBUS_CHECK_VERSION(1, 5, 0)
            ibus_property_set_symbol(self->setup_prop,
                                      SELF_GET_CLASS(self)->setup_prop_symbol);
#endif
            ibus_engine_update_property(IBUS_ENGINE(self), self->setup_prop);
        }
#endif
    }

    /**
     * refresh_property_list:
     * @self: this instances.
     *
     * Refresh the property list (language bar).
     */
    public void refresh_property_list(self) {
#ifndef UNIT_TEST
        self_refresh_property(self, "InputMode");
        self_refresh_property(self, "AlnumSize");
        self_refresh_property(self, "setup_prop");
#endif
    }

    /**
     * hide_property_list:
     * @self: this instances.
     *
     * Hide the property list (language bar).
     */
    public void hide_property_list(self) {
#ifndef UNIT_TEST
        IBUS_ENGINE_GET_CLASS(self)->property_hide(IBUS_ENGINE(self),
                                                   "AlnumSize");
#endif
    }

    private IBusProperty *get_ibus_property_by_name(self, const gchar * prop_name) {
        if (STRING_EQUALS(prop_name, "InputMode")) {
            return self->InputMode;
        } else if (STRING_EQUALS(prop_name, "AlnumSize")) {
            return self->AlnumSize;
        } else if (STRING_EQUALS(prop_name, "setup_prop")) {
            return self->setup_prop;
        }
        IBUS_CHEWING_LOG(MSG, "get_ibus_property_by_name(%s): NULL is returned", prop_name);
        return NULL;
    }


    /*==============================================================
     *  Overridden Parent (IBusEngine) methods
     */
    override(IBus:Engine) void reset(IBus:Engine * engine) {
        Self *self = SELF(engine);
        ibus_chewing_engine_reset(self);
    }

    override(IBus:Engine) void page_up(IBus:Engine * engine) {
        Self *self = SELF(engine);
        if (is_password(self))
            return;
        ibus_chewing_pre_edit_process_key(self->icPreEdit, IBUS_KEY_Page_Up, 0);
        self_update(self);
    }

    override(IBus:Engine) void page_down(IBus:Engine * engine) {
        Self *self = SELF(engine);
        if (is_password(self))
            return;
        ibus_chewing_pre_edit_process_key(self->icPreEdit, IBUS_KEY_Page_Down, 0);
        self_update(self);
    }

    override(IBus:Engine) void cursor_up(IBus:Engine * engine) {
        Self *self = SELF(engine);
        if (is_password(self))
            return;
        ibus_chewing_pre_edit_process_key(self->icPreEdit, IBUS_KEY_Up, 0);
        self_update(self);
    }

    override(IBus:Engine) void cursor_down(IBus:Engine * engine) {
        Self *self = SELF(engine);
        if (is_password(self))
            return;
        ibus_chewing_pre_edit_process_key(self->icPreEdit, IBUS_KEY_Down, 0);
        self_update(self);
    }

    override(IBus:Engine) void enable(IBus:Engine * engine) {
        Self *self = SELF(engine);
        ibus_chewing_engine_enable(self);
    }

    override(IBus:Engine) void disable(IBus:Engine * engine) {
        Self *self = SELF(engine);
        ibus_chewing_engine_disable(self);
    }

    override(IBus:Engine) void focus_in(IBus:Engine * engine) {
        Self *self = SELF(engine);
        ibus_chewing_engine_focus_in(self);
    }

    override(IBus:Engine) void focus_out(IBus:Engine * engine) {
        Self *self = SELF(engine);
        ibus_chewing_engine_focus_out(self);
    }

    override(IBus:Engine) void set_capabilities(IBus:Engine * engine, guint caps) {
        Self *self = SELF(engine);
        self->_priv->capabilite = caps;
        IBUS_CHEWING_LOG(MSG, "***** set_capabilities(%x): statusFlags=%x",
                         caps, self->_priv->statusFlags);
    }

    override(IBus:Engine) void property_show(IBus:Engine * engine, const gchar * prop_name) {
        IBUS_CHEWING_LOG(INFO, "property_show(-, %s)", prop_name);
        Self *self = SELF(engine);
        IBusProperty *prop = self_get_ibus_property_by_name(self, prop_name);
        ibus_property_set_visible(prop, TRUE);
    }

    override(IBus:Engine) void property_hide(IBus:Engine * engine, const gchar * prop_name) {
        IBUS_CHEWING_LOG(INFO, "property_hide(-, %s)", prop_name);
        Self *self = SELF(engine);
        IBusProperty *prop = self_get_ibus_property_by_name(self, prop_name);
        ibus_property_set_visible(prop, FALSE);
    }
}

%h{
void ibus_chewing_engine_reset(IBusChewingEngine *self);
void ibus_chewing_engine_enable(IBusChewingEngine *self);
void ibus_chewing_engine_disable(IBusChewingEngine *self);
void ibus_chewing_engine_focus_in(IBusChewingEngine *self);
void ibus_chewing_engine_focus_out(IBusChewingEngine *self);
gboolean ibus_chewing_engine_process_key_event(IBusEngine *self,
                                               guint key_sym,
                                               guint keycode,
                                               guint modifiers);
%}

%{
#include "IBusChewingEngine-signal.c"
#include "IBusChewingEngine-input-events.c"
%}
