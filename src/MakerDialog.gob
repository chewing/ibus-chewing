requires 2.0.0 
%alltop{
/*
 * Copyright © 2009  Red Hat, Inc. All rights reserved.
 * Copyright © 2009  Ding-Yi Chen <dchen at redhat.com>
 *
 * This file is part of the ibus-chewing Project.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
%}

%headertop{
#ifndef MAKER_DIALOG_H_
#define MAKER_DIALOG_H_
#include <stdlib.h>
#include <strings.h>
#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <locale.h>
#include "MakerDialogProperty.h"
#include "MakerDialogWidget.h"
%}

%headertop{
#define MKDG_PAGE_NAME_DEFAULT "..."
#ifndef WIDGET_ID_PREFIX
#define WIDGET_ID_PREFIX "+"
#endif

#ifndef MAKER_DIALOG_ID_LENGTH
#define MAKER_DIALOG_ID_LENGTH 200
#endif

#define MKDG_CONTAINER_TABLE_LOOKUP(table,key) (MkdgWidgetContainer *) g_hash_table_lookup(table, (gconstpointer) key)
%}

%{
#define GETTEXT_PACKAGE "gtk30"
#include <glib/gi18n.h>
%}

class Maker:Dialog from Gtk:Dialog {
    protected MkdgWgt *notebookWgt = NULL
    destroywith mkdg_wgt_destroy;

    protected MkdgWidgetFlag wFlags;

    private GHashTable *containerTable =
        { g_hash_table_new_full(g_str_hash, g_str_equal, NULL, NULL) }
        destroywith g_hash_table_destroy;

    private GHashTable *widgetTable =
        { g_hash_table_new_full(g_str_hash, g_str_equal, NULL, NULL) }
        destroywith g_hash_table_destroy;
    private GHashTable *notebookContentTable =
        { g_hash_table_new_full(g_str_hash, g_str_equal, NULL, NULL) }
        destroywith g_hash_table_destroy;
    private GStringChunk *widgetIds =
        { g_string_chunk_new(MAKER_DIALOG_ID_LENGTH) }
        destroywith g_string_chunk_free;
    private GPtrArray *pageLabels = NULL
        destroy {
            if (VAR) {
                g_ptr_array_free(VAR, TRUE);
            }
        };

    private MkdgProperties *properties = NULL
        destroy {
            if (VAR) {
                mkdg_properties_free(VAR);
            }
        };

    init(self) {
        /* initialize the object here */
    }

    public MakerDialog * new(void) {
        Self * self = GET_NEW; 
        return self;
    }

    public MakerDialog * new_full(MkdgProperties * properties,
                                  const gchar * title,
                                  MkdgWidgetFlag wFlags,
                                  MkdgButtonFlag bFlags) {
        Self * self = GET_NEW; 
        GtkDialog * dialog = GTK_DIALOG(self);
        gtk_window_set_title(GTK_WINDOW(dialog), title);
        gtk_window_set_destroy_with_parent(GTK_WINDOW(dialog), TRUE);
        gtk_window_set_type_hint(GTK_WINDOW(dialog), GDK_WINDOW_TYPE_HINT_DIALOG);
        self->wFlags = wFlags;
        self->_priv->properties = properties;

        gint i; 
        /* Create Buttons */
        for (i = MKDG_BUTTON_INDEX_INVALID -1; i >= 0; i--) {
            if ( bFlags & (1 << i)) {
                const gchar *buttonText = mkdg_button_get_text(i);
                mkdg_log(DEBUG, "new_full(-,%s,%X,%X) i=%d, buttonText=%s",
                    title, wFlags, bFlags, i, buttonText);
                MkdgButtonResponse response = mkdg_button_get_response(i);
                gtk_dialog_add_button(dialog, buttonText, response);
            }
        }

        /* Create Notebook */
        self->notebookWgt = gtk_notebook_new();
        mkdg_wgt_show(self->notebookWgt);
        GtkWidget *dialogVboxWgt = gtk_dialog_get_content_area(GTK_DIALOG(self));
        mkdg_wgt_show(dialogVboxWgt);
        gtk_box_pack_start(GTK_BOX(dialogVboxWgt), self->notebookWgt, TRUE, TRUE, 0);

        self_prepare(self);
        return self;
    }

    /**
     * add_property:
     * @self: A MakerDialog
     * @ctx: A PropertyContext which contain the value to be set.
     * @returns: TRUE if the property adding succeed; FALSE otherwise.
     *
     * Add a property to the dialog and corresponding Gtk widget will also be
     * set.
     */
    public gboolean add_property(self, PropertyContext * ctx) {

        if (ctx == NULL) {
            return FALSE;
        }
        mkdg_log(INFO, "add_property(%s) %s", ctx->spec->key,
            property_context_to_string(ctx));

        /* Create the widget */
        MkdgWidget * mWidget = mkdg_widget_new(ctx, self->wFlags);
        if (mWidget == NULL)
            return FALSE;

        /* Find the container */
        const gchar *pageName = (STRING_IS_EMPTY(ctx->spec->pageName)) ? 
            MKDG_PAGE_NAME_DEFAULT : ctx->spec->pageName;
        MkdgWidgetContainer *container =
            MKDG_CONTAINER_TABLE_LOOKUP(self->_priv->containerTable, pageName);

        /* Do we need a new container/page? */
        if (container == NULL) {
            MkdgWgt * vboxWgt = gtk_vbox_new(FALSE, MKDG_VBOX_SPACING_DEFAULT);
            mkdg_wgt_show(vboxWgt);
            container = mkdg_widget_container_new(vboxWgt);
            g_hash_table_insert(self->_priv->containerTable, (gpointer) pageName,
                                (gpointer) container);

            /* new notebook page */
            MkdgWgt * pageLabelWgt = gtk_label_new(_(pageName));
            mkdg_wgt_show(pageLabelWgt);
            gtk_notebook_append_page(GTK_NOTEBOOK(self->notebookWgt), vboxWgt,
                                     pageLabelWgt);
        }

        /* Add the widget to container */
        mkdg_widget_container_add_widget(container, mWidget);
        g_hash_table_insert(self->_priv->widgetTable, (gpointer) ctx->spec->key,
                            (gpointer) mWidget);
        return TRUE;
    }

    /** 
     * add_all_properties:
     * @self: A MakerDialog
     * @returns: TRUE if all properties added successfully; FALSE otherwise.
     *
     * Add all properties to the dialog and corresponding Gtk widget will also be
     * set.
     *
     */
    public gboolean add_all_properties(self) {
        gint i;
        gboolean result = TRUE;
        for(i = 0; i < mkdg_properties_size(self->_priv->properties); i++) {
            PropertyContext * ctx = mkdg_properties_index(self->_priv->properties, i);
            GValue * ret = property_context_load(ctx, NULL);
            if (ret == NULL)
                result = FALSE;
            self_add_property(self, ctx);
        }
        return result;
    }

    /**
     * prepare:
     * @returns: TRUE if success; FALSE otherwise.
     *
     * Prepare the MakerDialog after new. This includes add_all_properties.
     */
    protected gboolean prepare(self) {
        gboolean success;
        success = self_add_all_properties(self);
            if (!success) {
                return FALSE;
            }

        GList * containerList = g_hash_table_get_values(self->_priv->containerTable);
        GList * node;
        for(node = g_list_first(containerList); node != NULL; node = g_list_next(node)) {
            MkdgWidgetContainer *container = (MkdgWidgetContainer *) node->data;
            mkdg_widget_container_align_all_children(container, 1.0f, 0.5f, 0.0f, 0.5f);
        }
        g_list_free(containerList);
        return TRUE;
    }

    /**
     * assign_widget_value:
     * @self: A MakerDialog.
     * @ctx: The PropertyContext
     * @userData: userData that pass through applyFunc.
     *
     * Assign the value shown in widget to the property.
     * That is firstly save the value, then apply the value.
     *
     * @see_also: set_widget_value()
     */
    public void assign_widget_value(self, PropertyContext *ctx, gpointer userData) {
        mkdg_log(INFO, "assign_widget_value(%s)", ctx->spec->key);
        GValue gValue = { 0 };
        mkdg_g_value_reset(&gValue, ctx->spec->valueType, TRUE);
        self_get_widget_value(self, ctx->spec->key, &gValue);
        property_context_save(ctx, &gValue, userData);
        property_context_apply(ctx, userData);
        g_value_unset(&gValue);
    }

    /**
     * assign_all_widgets_values:
     * @self: A MakerDialog.
     * @userData: userData that pass through applyFunc.
     *
     * Invoke assign_widget_value for all widgets.
     *
     * @see_also: assign_widget_value(), set_widget_value()
     */
    public void assign_all_widgets_values(self, gpointer userData) {
        gint i;
        for (i = 0; i < mkdg_properties_size(self->_priv->properties); i++) {
            PropertyContext *ctx = mkdg_properties_index(self->_priv->properties, i);
            self_assign_widget_value(self, ctx, userData);
        }
    }

    /**
     * save_all_widgets_values:
     * @self: A MakerDialog.
     * @userData: userData that pass through property_context_save.
     *
     * Save all widget values to configuration backend.
     * 
     */
    public void save_all_widgets_values(self, gpointer userData) {
        gint i;
        for (i = 0; i < mkdg_properties_size(self->_priv->properties); i++) {
            PropertyContext *ctx = mkdg_properties_index(self->_priv->properties,i);
            GValue gValue= { 0 };
            mkdg_g_value_reset(&gValue, ctx->spec->valueType, TRUE);
            self_get_widget_value(self, ctx->spec->key, &gValue);
            property_context_save(ctx, &gValue, userData);
            g_value_reset(&gValue);
        }
    }


    /**
     * get_widget_value:
     * @self: A MakerDialog.
     * @key: The key of a property.
     * @value: GValue that store output.
     * @returns: The address of value if success, NULL if failed.
     *
     * Get value as display in widget.
     */
    public GValue * get_widget_value(self, const gchar * key, GValue * value) {
        mkdg_log(INFO, "get_widget_value(%s)", key);
        MkdgWidget * mWidget = self_get_widget_by_key(self, key);
        if (mWidget == NULL) {
            /* Not fount */
            return NULL;
        }
        return mkdg_widget_get_widget_value(mWidget, value);
    }

    /**
     * set_widget_value:
     * @self: A MakerDialog.
     * @key: The key of a property.
     * @value: Value to be shown in widget.
     *
     * Set value for widget display.
     * However, value in PropertyContext is not changed.
     * Use assign_widget_value() to do it.
     * @see_also: assign_widget_value()
     */
    public void set_widget_value(self, const gchar * key, GValue * value) {
        mkdg_log(INFO, "set_widget_value(%s, %s)", key, mkdg_g_value_to_string(value));
        MkdgWidget * mWidget = self_get_widget_by_key(self, key);
        mkdg_widget_set_widget_value(mWidget, value);
    }

    /**
     * show:
     * @self: A MakerDialog.
     *
     */
    public void show(self) {
        mkdg_wgt_show_all(GTK_WIDGET(self));
    }

    public MkdgWidget * get_widget_by_key(self, const gchar *key) {
        return (MkdgWidget *) g_hash_table_lookup(self->_priv->widgetTable, key);
    }
}

%headertop{
#endif    /* MAKER_DIALOG_H_ */
%}
